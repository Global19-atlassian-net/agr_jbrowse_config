curieUrl = function(track,f) {
    var curie = f.get('curie');
    return 'http://www.alliancegenome.org/gene/'+curie; }

geneColor = function(feature) {
    var type = feature.get('type');
    var biotype = feature.get('so_term_name');
    if (!(typeof biotype === 'undefined') && biotype != 'protein_coding_gene') {return 'gray';}
    if (typeof biotype === 'undefined') {
        var parent = feature._parent;
        var parenttype = parent.get('so_term_name');
        if (!(typeof parenttype === 'undefined') && biotype != 'protein_coding_gene') {return 'gray';}
    }
    if (type.match(/exon/)) {return 'gray';}
    if (type.match(/pseudo/)) {return 'gray';}
    if (type.match(/miRNA/)) {return 'gray';}
    var strand = feature.get('strand');
    if (strand == -1) {return 'teal';}
    if (strand ==  1) {return 'darkviolet';}
    return 'gray'; }

geneHeight = function(f) {
    var type = f.get('type'); 
    if (type == 'CDS') {return 10;} 
    return 6;  
    }

exonColor = function(f) {
    var strand = f.get('strand');
    if (strand == -1) {return 'turquoise';}
    if (strand ==  1) {return 'violet';}
    return 'gray';
    }

geneURL = function(track,f) {
    var type = f.get('type');
    var source = f.get('source');
    if (type == 'ncRNA' && source == 'RNAz') {return; }
    var name = f.get('name');
    if (type == 'gene') {return 'http://www.wormbase.org/get?name='+name+';class=Gene'; }
    return;}

simpleGeneURL = function(track,f) {
    var name = f.get('Name');
    return 'http://www.wormbase.org/get?name='+name+';class=Gene';}

transcriptURL = function(track,f) {
    console.log(f);
    var parent = f.get('jbrowse_parent');
    var str = parent.replace(/Gene:/, '');
    console.log(str);
    return 'http://www.wormbase.org/get?name='+str+';class=Gene';}

geneGlyph = function(f) {
    var biotype = f.get('so_term_name');
    if (!(f.children())) {return 'JBrowse/View/FeatureGlyph/Box';}
    var type = f.get('type');
    if (type.match(/_gene/))    {return 'wormbase-glyphs/View/FeatureGlyph/NoncodingTranscript';}
    if (typeof biotype === 'undefined') {return 'wormbase-glyphs/View/FeatureGlyph/WBGene';}
    if (biotype=='tRNA_gene')  {return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene';}
    if (biotype=='snoRNA_gene'){return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene';}
    if (biotype=='snRNA_gene') {return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene';}
    if (biotype=='scRNA_gene') {return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene';}
    if (biotype=='rRNA_gene')  {return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene';}
    if (biotype=='piRNA_gene') {return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene';}
    if (biotype=='miRNA_gene') {return 'wormbase-glyphs/View/FeatureGlyph/MiRNAGene';}
    if (biotype=='lincRNA_gene'){return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene';}
    if (biotype.match(/lncRNA/)){return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene';}
    if (biotype=='ncRNA_gene') {return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene';}
    if (biotype=='pseudogene') {return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene';}
    if (biotype=='protein_coding_gene') {return 'wormbase-glyphs/View/FeatureGlyph/WBGene';}
    if (biotype=='gene') {return 'wormbase-glyphs/View/FeatureGlyph/WBGene';}
    return 'wormbase-glyphs/View/FeatureGlyph/NoncodingGene'; }

geneLinkLabel = function(track,f) {
    var type = f.get('type');
    var patt = /RNA|transcript/;
    if (patt.test(type)) {return f.get('Name');}
    var aliases = f.get('Alias');
    var locus;
    if (Array.isArray(aliases)) {locus = aliases[0];  }
        else {locus = aliases;}
    var name = f.get('sequence_name');
    if (locus == name) {return name; }
    if (typeof locus === 'undefined') {return name;}
    return locus+' ('+name+')';  }

geneLabel = function(f) {
    var type = f.get('type');
    var patt = /RNA|transcript/;
    if (patt.test(type)) {return f.get('Name');}
    var aliases = f.get('Alias');
    var locus;
    if (Array.isArray(aliases)) {locus = aliases[0];  }
        else {locus = aliases;}
    var name = f.get('sequence_name');
    if (locus == name) {return name; }
    if (typeof locus === 'undefined') {return name;}
    if (name == 'undefined' || typeof name === 'undefined' ) {return locus;}
    return locus+' ('+name+')';  }

variantsBalloon = function(f) {
    var f = this.feature;
    /*console.log(f);*/
    var br='</br>';
    var symbol= f.get('Symbol');
    symbol  = symbol.values[0];
    var notes = '<b>Symbol: </b>' + symbol + br;
    var type = f.get('type');
    notes = notes + '<b>Type: </b>' + type +br;
    var name = f.get('name');
    notes = notes + '<b>curie/allele: </b>' + name +br;
    var cons = f.get('geneLevelConsequence');
    cons = cons.values[0];
    notes = notes + '<b>Consequence: </b>'+cons +br;
    var seqid = f.get('seq_id');
    var start = f.get('start');
    var end   = f.get('end');
    notes = notes + '<b>Position: </b>' + seqid +':'+start+'..'+end+br;
    var ref_allele = f.get('reference_allele');
    if (ref_allele.length > 20) {
        ref_allele = ref_allele.substring(0,8)+ '...' +ref_allele.substring(ref_allele.length-8);
    }
    var alt_allele = f.get('alternative_alleles');
    alt_allele = alt_allele.values[0];
    if (alt_allele.length > 20) {
        alt_allele = alt_allele.substring(0,8)+'...'+alt_allele.substring(alt_allele.length-8);
    }
    notes = notes + '<b>Sequence change: </b>'+ ref_allele + '->' + alt_allele   + br;
    var length= end-start;
    notes = notes + '<b>Length: </b>' + length + br;
    var hgvs  = f.get('hgvs_nomenclature');
    var hgvs  = hgvs.values[0];
    notes = notes + '<b>HGVS name: </b>' + hgvs + br;
    return notes + 'no references or additional alleles yet' + '<hr/>Click feature for more info (opens gene page)';
    }

variationLabel = function(f) {
    /*var f = this.feature;*/
    var symbol= f.get('symbol_text');
    symbol  = symbol.values[0];
    if (! (typeof symbol === 'undefined') ) {
        return symbol;
    }
    return f.get('name');
    }

variationCurieUrl = function(track,f) {
    var curie = f.get('allele_of_genes');
    curie     = curie.values[0];
    return 'http://www.alliancegenome.org/gene/'+curie + "#alleles"; }

variationGlyph = function(f) {
    var type = f.get('type');
    if (type.match(/insertion/i))      { return 'wormbase-glyphs/View/FeatureGlyph/DownTriangle';}
    if (type =='SNV')                  { return 'wormbase-glyphs/View/FeatureGlyph/Diamond'; }
    if (type =='SNP')                  { return 'wormbase-glyphs/View/FeatureGlyph/Diamond'; }
    if (type =='point_mutation')       { return 'wormbase-glyphs/View/FeatureGlyph/Diamond'; }
    return 'JBrowse/View/FeatureGlyph/Box';
    }

variationColor = function(f) {
    var cons = f.get('geneLevelConsequence');
    cons = cons.values[0];
    var color = 'black';
    if(cons == 'frameshift variant') {color = '#9400D3'}
    else if(cons == 'stop lost') {color = '#ff0000'}
    else if(cons == 'splice acceptor variant ') {color = '#FF581A'}
    else if(cons == 'protein altering variant') {color = '#FF0080'}
    else if(cons == 'coding sequence variant') {color = '#458b00'}
    else if(cons == 'stop gained') {color = '#ff0000'}
    else if(cons == 'incomplete terminal codon variant') {color = '#ff00ff'}
    else if(cons == 'transcript ablation') {color = '#ff0000'}
    else if(cons == 'start lost') {color = '#ffd700'}
    else if(cons == 'splice donor variant') {color = '#FF581A'}
    else if(cons == 'splice region variant') {color = '#ff7f50'}
    else if(cons == 'missense variant') {color = '#ffd700'}
    else if(cons == 'inframe deletion') {color = '#ff69b4'}
    else if(cons == 'inframe insertion') {color = '#ff69b4'}
    else if(cons == '3 prime UTR variant') {color = '#7ac5cd'}
    else if(cons == 'synonymous variant') {color = '#76ee00'}
    else if(cons == 'upstream gene variant') {color = '#a2b5cd'}
    else if(cons == 'downstream gene variant') {color = '#a2b5cd'}
    else if(cons == 'non coding transcript exon variant') {color = '#32cd32'}
    else if(cons == 'intron variant') {color = '#02599c'}
    else if(cons == '5 prime UTR variant') {color = '#7ac5cd'}
    else if(cons == 'stop retained variant') {color = '#76ee00'}
    else if(cons == 'intergenic variant') {color = '#636363'}
    else if(cons == 'non coding transcript variant') {color = '#32cd32'}
    return color;
    }
